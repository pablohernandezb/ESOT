Republic_of_the_Congo = "Republic of the Congo",
Djibouti = "Djibouti",
Dominican_Republic = "Dominican Republic",
Eritrea = "Eritrea",
Gabon = "Gabon",
The_Gambia = "The Gambia",
Georgia = "Georgia",
Guinea_Bissau = "Guinea-Bissau",
Jamaica = "Jamaica",
Kazakhstan = "Kazakhstan",
Kyrgyzstan = "Kyrgyzstan",
Laos = "Laos",
Libya = "Libya",
Madagascar = "Madagascar",
Moldova = "Moldova",
Namibia = "Namibia",
Palestine_West_Bank = "Palestine/West Bank",
Rwanda = "Rwanda",
Somalia = "Somalia",
Sri_Lanka = "Sri Lanka",
Eswatini = "Eswatini",
Tajikistan = "Tajikistan",
Togo = "Togo",
Trinidad_and_Tobago = "Trinidad and Tobago",
Turkmenistan = "Turkmenistan",
German_Democratic_Republic = "German Democratic Republic",
Palestine_Gaza = "Palestine/Gaza",
Somaliland = "Somaliland",
Uzbekistan = "Uzbekistan",
Austria = "Austria",
Bahrain = "Bahrain",
Barbados = "Barbados",
Belgium = "Belgium",
Bosnia_and_Herzegovina = "Bosnia and Herzegovina",
Bulgaria = "Bulgaria",
Comoros = "Comoros",
Croatia = "Croatia",
Cuba = "Cuba",
Cyprus = "Cyprus",
Czechia = "Czechia",
Denmark = "Denmark",
Equatorial_Guinea = "Equatorial Guinea",
Estonia = "Estonia",
Fiji = "Fiji",
Finland = "Finland",
Greece = "Greece",
Guyana = "Guyana",
Hong_Kong = "Hong Kong",
Iceland = "Iceland",
Israel = "Israel",
Kuwait = "Kuwait",
Lithuania = "Lithuania",
Luxembourg = "Luxembourg",
North_Macedonia = "North Macedonia",
Malaysia = "Malaysia",
Malta = "Malta",
Mauritius = "Mauritius",
Montenegro = "Montenegro",
New_Zealand = "New Zealand",
Norway = "Norway",
Oman = "Oman",
Paraguay = "Paraguay",
Romania = "Romania",
Sao_Tome_and_Principe = "Sao Tome and Principe",
Saudi_Arabia = "Saudi Arabia",
Serbia = "Serbia",
Seychelles = "Seychelles",
Singapore = "Singapore",
Slovakia = "Slovakia",
Slovenia = "Slovenia",
Solomon_Islands = "Solomon Islands",
Vanuatu = "Vanuatu",
United_Arab_Emirates = "United Arab Emirates",
Palestine_British_Mandate = "Palestine/British Mandate",
Hungary = "Hungary",
Zanzibar = "Zanzibar"
),
es = list(
Mexico = "México",
Suriname = "Surinam",
Sweden = "Suecia",
Switzerland = "Suiza",
Ghana = "Ghana",
South_Africa = "Sudáfrica",
Japan = "Japón",
Burma_Myanmar = "Birmania/Myanmar",
Russia = "Rusia",
Albania = "Albania",
Egypt = "Egipto",
Yemen = "Yemen",
Colombia = "Colombia",
Poland = "Polonia",
Brazil = "Brasil",
United_States_of_America = "Estados Unidos de América",
Portugal = "Portugal",
El_Salvador = "El Salvador",
South_Yemen = "Yemen del Sur",
Bangladesh = "Bangladés",
Bolivia = "Bolivia",
Haiti = "Haití",
Honduras = "Honduras",
Mali = "Malí",
Pakistan = "Pakistán",
Peru = "Perú",
Senegal = "Senegal",
South_Sudan = "Sudán del Sur",
Sudan = "Sudán",
Vietnam = "Vietnam",
Republic_of_Vietnam = "República de Vietnam",
Afghanistan = "Afganistán",
Argentina = "Argentina",
Ethiopia = "Etiopía",
India = "India",
Kenya = "Kenia",
North_Korea = "Corea del Norte",
South_Korea = "Corea del Sur",
Kosovo = "Kosovo",
Lebanon = "Líbano",
Nigeria = "Nigeria",
Philippines = "Filipinas",
Tanzania = "Tanzania",
Taiwan = "Taiwán",
Thailand = "Tailandia",
Uganda = "Uganda",
Venezuela = "Venezuela",
Benin = "Benín",
Bhutan = "Bután",
Burkina_Faso = "Burkina Faso",
Cambodia = "Camboya",
Indonesia = "Indonesia",
Mozambique = "Mozambique",
Nepal = "Nepal",
Nicaragua = "Nicaragua",
Niger = "Níger",
Zambia = "Zambia",
Zimbabwe = "Zimbabue",
Guinea = "Guinea",
Ivory_Coast = "Costa de Marfil",
Mauritania = "Mauritania",
Canada = "Canadá",
Australia = "Australia",
Botswana = "Botsuana",
Burundi = "Burundi",
Cape_Verde = "Cabo Verde",
Central_African_Republic = "República Centroafricana",
Chile = "Chile",
Costa_Rica = "Costa Rica",
Timor_Leste = "Timor Oriental",
Ecuador = "Ecuador",
France = "Francia",
Germany = "Alemania",
Guatemala = "Guatemala",
Iran = "Irán",
Iraq = "Irak",
Ireland = "Irlanda",
Italy = "Italia",
Jordan = "Jordania",
Latvia = "Letonia",
Lesotho = "Lesoto",
Liberia = "Liberia",
Malawi = "Malaui",
Maldives = "Maldivas",
Mongolia = "Mongolia",
Morocco = "Marruecos",
Netherlands = "Países Bajos",
Panama = "Panamá",
Papua_New_Guinea = "Papúa Nueva Guinea",
Qatar = "Catar",
Sierra_Leone = "Sierra Leona",
Spain = "España",
Syria = "Siria",
Tunisia = "Túnez",
Türkiye = "Turquía",
Ukraine = "Ucrania",
United_Kingdom = "Reino Unido",
Uruguay = "Uruguay",
Algeria = "Argelia",
Angola = "Angola",
Armenia = "Armenia",
Azerbaijan = "Azerbaiyán",
Belarus = "Bielorrusia",
Cameroon = "Camerún",
Chad = "Chad",
China = "China",
Democratic_Republic_of_the_Congo = "República Democrática del Congo",
Republic_of_the_Congo = "República del Congo",
Djibouti = "Yibuti",
Dominican_Republic = "República Dominicana",
Eritrea = "Eritrea",
Gabon = "Gabón",
The_Gambia = "Gambia",
Georgia = "Georgia",
Guinea_Bissau = "Guinea-Bisáu",
Jamaica = "Jamaica",
Kazakhstan = "Kazajistán",
Kyrgyzstan = "Kirguistán",
Laos = "Laos",
Libya = "Libia",
Madagascar = "Madagascar",
Moldova = "Moldavia",
Namibia = "Namibia",
Palestine_West_Bank = "Palestina/Cisjordania",
Rwanda = "Ruanda",
Somalia = "Somalia",
Sri_Lanka = "Sri Lanka",
Eswatini = "Esuatini",
Tajikistan = "Tayikistán",
Togo = "Togo",
Trinidad_and_Tobago = "Trinidad y Tobago",
Turkmenistan = "Turkmenistán",
German_Democratic_Republic = "República Democrática Alemana",
Palestine_Gaza = "Palestina/Gaza",
Somaliland = "Somalilandia",
Uzbekistan = "Uzbekistán",
Austria = "Austria",
Bahrain = "Baréin",
Barbados = "Barbados",
Belgium = "Bélgica",
Bosnia_and_Herzegovina = "Bosnia y Herzegovina",
Bulgaria = "Bulgaria",
Comoros = "Comoras",
Croatia = "Croacia",
Cuba = "Cuba",
Cyprus = "Chipre",
Czechia = "Chequia",
Denmark = "Dinamarca",
Equatorial_Guinea = "Guinea Ecuatorial",
Estonia = "Estonia",
Fiji = "Fiyi",
Finland = "Finlandia",
Greece = "Grecia",
Guyana = "Guyana",
Hong_Kong = "Hong Kong",
Iceland = "Islandia",
Israel = "Israel",
Kuwait = "Kuwait",
Lithuania = "Lituania",
Luxembourg = "Luxemburgo",
North_Macedonia = "Macedonia del Norte",
Malaysia = "Malasia",
Malta = "Malta",
Mauritius = "Mauricio",
Montenegro = "Montenegro",
New_Zealand = "Nueva Zelanda",
Norway = "Noruega",
Oman = "Omán",
Paraguay = "Paraguay",
Romania = "Rumanía",
Sao_Tome_and_Principe = "Santo Tomé y Príncipe",
Saudi_Arabia = "Arabia Saudita",
Serbia = "Serbia",
Seychelles = "Seychelles",
Singapore = "Singapur",
Slovakia = "Eslovaquia",
Slovenia = "Eslovenia",
Solomon_Islands = "Islas Salomón",
Vanuatu = "Vanuatu",
United_Arab_Emirates = "Emiratos Árabes Unidos",
Palestine_British_Mandate = "Palestina/Mandato Británico",
Hungary = "Hungría",
Zanzibar = "Zanzíbar"
)
)
get_label <- function(key, lang = "en") {
if (!lang %in% names(localizations)) lang <- "en"
label <- localizations[[lang]][[key]]
if (is.null(label)) return(key)
label
}
get_country_name <- function(name, lang = "en") {
key <- gsub("[ -]", "_", name)
if (!lang %in% names(country_names)) lang <- "en"
if (!is.null(country_names[[lang]][[key]])) {
return(country_names[[lang]][[key]])
}
# Try direct match if key not found
if (!is.null(country_names[[lang]][[name]])) {
return(country_names[[lang]][[name]])
}
return(name)
}
plot_episodes_test <- function(years = c(1900, 2023),
country = c("Sweden"),
start_incl  = 0.01,
cum_incl  = 0.1,
year_turn = 0.03,
cum_turn = 0.1,
tolerance = 5,
data = ERT::vdem,
lang = "en") {
eps <- ERT::get_eps(data = data,
start_incl = start_incl,
cum_incl = cum_incl,
year_turn = year_turn,
cum_turn = cum_turn,
tolerance = tolerance)
if(!(is.numeric(years) && length(years) == 2 && years[2] > years[1]))
stop(get_label("stop_years_format", lang))
if(!is.character(country))
stop(get_label("stop_country_format", lang))
if(length(country) > 1)
stop(get_label("stop_more_than_one_country", lang))
if(length(country) == 0)
stop(get_label("stop_no_country", lang))
if(!country %in% data$country_name)
stop(get_label("stop_country_not_found", lang))
if(max(years) < min(eps %>% dplyr::filter(country_name==country) %>% dplyr::pull(year)) | max(years)>max(eps %>% dplyr::filter(country_name==country) %>% dplyr::pull(year)))
stop(get_label("stop_data_not_available", lang))
if(!(is.numeric(start_incl) && length(start_incl) == 1))
stop(get_label("stop_start_incl_format", lang))
if(!(is.numeric(cum_incl) && length(cum_incl) == 1))
stop(get_label("stop_cum_incl_format", lang))
if(!(is.numeric(year_turn) && length(year_turn) == 1))
stop(get_label("stop_year_turn_format", lang))
if(!(is.numeric(cum_turn) && length(cum_turn) == 1))
stop(get_label("stop_cum_turn_format", lang))
if(!(is.numeric(tolerance) && length(tolerance) == 1))
stop(get_label("stop_tolerance_format", lang))
year <- country_name <- dem_ep <- aut_ep <- overlap_eps <- country_text_id <- v2x_polyarchy <-
ep_type <- episode <- vdem <- aut_ep_start_year <- aut_ep_end_year <-
dem_ep_start_year <- dem_ep_end_year <- aut_pre_ep_year <-
dem_pre_ep_year <- episode_id <- countries <- NULL
eps_year <- eps %>%
dplyr::filter(country_name == country, dplyr::between(year, min(years), max(years))) %>%
dplyr::filter(dem_ep == 1 | aut_ep == 1)
if(nrow(eps_year)>1){
eps_year <- eps_year %>%
dplyr::mutate(overlap_eps = ifelse(!is.na(aut_ep_id) & !is.na(dem_ep_id), "overlaps", NA)) %>%
tidyr::pivot_longer(cols = c(aut_ep_id, dem_ep_id, overlap_eps), names_to = "ep_type", values_to = "episode") %>%
dplyr::select(country_name, country_text_id, year, v2x_polyarchy, ep_type, episode,
aut_ep_start_year, aut_ep_end_year, aut_ep_outcome,
dem_ep_start_year, dem_ep_end_year,
aut_pre_ep_year, dem_pre_ep_year, dem_ep_outcome,
aut_ep_censored, dem_ep_censored) %>%
dplyr::filter((ep_type == "dem_ep_id" & dem_pre_ep_year == 0) |
(ep_type == "aut_ep_id" & aut_pre_ep_year == 0) |
ep_type == "overlaps" & aut_pre_ep_year == 0 & dem_pre_ep_year == 0) %>%
drop_na(episode) %>%
group_by(year) %>%
mutate(overlap_eps = n(),
outcome_dem_ep = case_when(dem_ep_outcome == 6 ~ get_label("outcome_censored", lang),
dem_ep_censored == 1 ~ get_label("outcome_censored", lang),
dem_ep_outcome == 1 ~ get_label("outcome_dem_transition", lang),
dem_ep_outcome == 2 ~ get_label("outcome_dem_preempted", lang),
dem_ep_outcome == 3 ~ get_label("outcome_dem_stabilized", lang),
dem_ep_outcome == 4 ~ get_label("outcome_dem_reverted", lang),
dem_ep_outcome == 5 ~ get_label("outcome_dem_deepened", lang),
T ~ NA_character_),
outcome_aut_ep = case_when(aut_ep_outcome == 6 ~ get_label("outcome_censored", lang),
aut_ep_censored == 1 ~ get_label("outcome_censored", lang),
aut_ep_outcome == 1 ~ get_label("outcome_aut_breakdown", lang),
aut_ep_outcome == 2 ~ get_label("outcome_aut_preempted", lang),
aut_ep_outcome == 3 ~ get_label("outcome_aut_diminished", lang),
aut_ep_outcome == 4 ~ get_label("outcome_aut_averted", lang),
aut_ep_outcome == 5 ~ get_label("outcome_aut_regressed", lang),
T ~ NA_character_),
episode_id = ifelse(ep_type == "aut_ep_id", paste0("AUT: ", aut_ep_start_year, "-", aut_ep_end_year, " ", outcome_aut_ep), episode),
episode_id = ifelse(ep_type == "dem_ep_id", paste0("DEM: ", dem_ep_start_year, "-", dem_ep_end_year, " ", outcome_dem_ep), episode_id)) %>%
ungroup()
polyarchy <- eps %>%
filter(country_name == country, between(year, min(years), max(years))) %>%
ungroup() %>%
select(year, v2x_polyarchy)
if(max(eps_year$overlap_eps) > 1) {
print(get_label("warning_overlap", lang))
}
p <-   ggplot2::ggplot() +
geom_line(data = eps_year, aes(group = episode_id, color = episode_id, linetype = ep_type,x = year, y = v2x_polyarchy)) +
geom_line(data = polyarchy, aes(x = year, y = v2x_polyarchy), alpha = 0.35) +
scale_colour_grey(breaks = levels(factor(eps_year$episode_id[eps_year$episode_id!="overlaps"])),
name = get_label("episode", lang), start = 0.01, end = 0.01) +
scale_linetype_manual(name = get_label("episode_type", lang), breaks = c("aut_ep_id", "dem_ep_id", "overlaps"),
labels = c(get_label("autocratization", lang), get_label("democratization", lang), get_label("overlap", lang)),
values = c("dashed", "dotted", "solid")) +
scale_x_continuous(breaks = seq(round(min(years) / 10) * 10, round(max(years) / 10) * 10, 10)) +
xlab(get_label("year", lang)) +  ylab(get_label("edi", lang)) + ylim(0,1) +
theme_bw() +
guides(color = guide_legend(override.aes = list(size = 0))) +
ggtitle(get_country_name(country, lang))
if (isTRUE(length(which(eps_year$ep_type == "dem_ep_id")) > 0)){
if (any(eps_year$year%in%c(eps_year$dem_ep_start_year))) {
p <- p +  geom_point(data = eps_year, aes(x = year, y = ifelse(year == dem_ep_start_year, v2x_polyarchy, NA)), shape = 2, alpha = 0.75)
} else {
p
}
if (any(eps_year$year%in%c(eps_year$dem_ep_end_year))) {
p <- p +geom_point(data = eps_year, aes(x = year, y = ifelse(year == dem_ep_end_year, v2x_polyarchy, NA)), shape = 17, alpha = 0.75)
} else {
p
}
}
if (isTRUE(length(which(eps_year$ep_type == "aut_ep_id")) > 0)) {
if (any(eps_year$year%in%c(eps_year$aut_ep_start_year))){
p <- p +  geom_point(data = eps_year, aes(x = year, y = ifelse(year == aut_ep_start_year, v2x_polyarchy, NA)), shape = 1, alpha = 0.75)
} else {
p
}
if (any(eps_year$year%in%c(eps_year$aut_ep_end_year))){
p<- p+ geom_point(data = eps_year, aes(x = year, y = ifelse(year == aut_ep_end_year, v2x_polyarchy, NA)), shape = 16, alpha = 0.75)
} else {
p
}
}
p
} else {
print(get_label("no_episodes", lang))
polyarchy <- eps %>%
filter(country_name == country, between(year, min(years), max(years))) %>%
ungroup() %>%
select(year, v2x_polyarchy)
p <-ggplot2::ggplot() +
geom_line(data = polyarchy, aes(x = as.numeric(year), y = v2x_polyarchy), alpha = 0.35) +
scale_x_continuous(breaks = seq(round(min(years) / 10) * 10, round(max(years) / 10) * 10, 10)) +
xlab(get_label("year", lang)) +  ylab(get_label("edi", lang)) + ylim(0,1) +
theme_bw() +
ggtitle(get_country_name(country, lang))
p
}
}
plot_episodes_test(country = c("The Gambia"), years = c(1900, 2023), lang = "es")
plot_episodes_test(country = c("Poland"), years = c(1900, 2023), lang = "es")
plot_episodes_test(country = c("Czechia"), years = c(1900, 2023), lang = "es")
plot_episodes_test(country = c("Estonia"), years = c(1900, 2023), lang = "es")
plot_episodes_test(country = c("Argentina"), years = c(1900, 2023), lang = "es")
plot_episodes_test(country = c("Peru"), years = c(1900, 2023), lang = "es")
plot_episodes_test(country = c("Chile"), years = c(1900, 2023), lang = "es")
setwd("c:/Users/astro/Downloads/Artículo CSL/data")
plot_episodes_test(country = c("Venezuela"), years = c(1900, 2023), lang = "es")
source("get_eps.R")
setwd("d:/Projects/ERT-1/my_test/")
source("d:/Projects/ERT-1/R/get_eps.R")
localizations <- list(
en = list(
year = "Year",
statization = "statization",
privatization = "privatization",
number_countries = "Number of Countries",
countries_percent = "Countries (%)",
no_data = "Error: Data not available for time range",
no_episodes = "No episodes during selected period."
),
es = list(
year = "Año",
statization = "Estatización",
privatization = "Privatización",
number_countries = "Número de países",
countries_percent = "Países (%)",
no_data = "Error: Datos no disponibles para el rango de tiempo",
no_episodes = "No hay episodios durante el período seleccionado."
)
)
get_label <- function(key, lang = "es") {
if (!lang %in% names(localizations)) lang <- "en"
label <- localizations[[lang]][[key]]
if (is.null(label)) return(key)
label
}
plot_all <- function(abs = T,
years = c(1900, 2023),
start_incl  = 0.04,
cum_incl  = 0.4,
year_turn = 0.12,
cum_turn = 0.4,
tolerance = 5,
lang = "en") {
eps <- get_eps(data = ERT::vdem,
start_incl = start_incl,
cum_incl = cum_incl,
year_turn = year_turn,
cum_turn = cum_turn,
tolerance = tolerance)
stopifnot(is.logical(abs), length(abs) == 1)
stopifnot(is.numeric(years), length(years) == 2, years[2] > years[1])
stopifnot(is.numeric(start_incl), length(start_incl) == 1)
stopifnot(is.numeric(cum_incl), length(cum_incl) == 1)
stopifnot(is.numeric(year_turn), length(year_turn) == 1)
stopifnot(is.numeric(cum_turn), length(cum_turn) == 1)
stopifnot(is.numeric(tolerance), length(tolerance) == 1)
#perhaps this is redundant
if(min(years)<min(ERT::vdem$year) | max(years)>max(ERT::vdem$year))
get_label("no_data", lang)
if (isTRUE(abs)) {
eps_year <- eps %>%
dplyr::filter(between(year, min(years), max(years))) %>%
{if(nrow(.) == 0) stop(get_label("no_episodes", lang)) else .} %>%
dplyr::group_by(year) %>%
dplyr::summarise(dem_eps = sum(dem_ep),
aut_eps = sum(aut_ep)) %>%
tidyr::pivot_longer(cols = c(dem_eps, aut_eps), names_to = "ep_type", values_to = "countries")
} else {
eps_year <- eps %>%
dplyr::filter(between(year, min(years), max(years))) %>%
dplyr::group_by(year) %>%
dplyr::summarise(dem_eps = sum(dem_ep) / length(unique(country_id)),
aut_eps = sum(aut_ep) / length(unique(country_id))) %>%
tidyr::pivot_longer(cols = c(dem_eps, aut_eps), names_to = "ep_type", values_to = "countries")
}
p <-  ggplot2::ggplot(data = eps_year, aes(x = year, y = countries, group = ep_type, linetype = ep_type)) +
geom_line() +
scale_x_continuous(breaks = seq(round(min(years) / 10) * 10, round(max(years) / 10) * 10, 10)) +
scale_linetype(name = "", breaks = c("aut_eps", "dem_eps"), labels = c(get_label("statization", lang), get_label("privatization", lang))) +
xlab(get_label("year", lang)) +
theme_classic() +
theme(legend.position = "bottom")
if (isTRUE(abs)) {
p +  ylab(get_label("number_countries", lang))
}  else {
p +  ylab(get_label("countries_percent", lang))
}
}
plot_all(lang = "es")
devtools::load_all("d:/Projects/ERT-1")
